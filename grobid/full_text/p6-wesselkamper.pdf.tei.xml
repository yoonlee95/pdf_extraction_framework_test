<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/lopez/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.3-SNAPSHOT" ident="GROBID" when="2017-12-01T14:43+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">C</forename><surname>Wesselkamper</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Virginia Polytechnic Institute and State University</orgName>
							</affiliation>
						</author>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>Some Classical Mathematical Results Related to the Problems of the Firmware/Hardware Interface</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The paper reviews the Shannon and Reed-Muller Decomposition Theorems and notes the relationship of the former to machine instruction set. It hypothesizes an instruction set based on Galois field operations and applies the divided difference methods of Newton to the automatic generation of a polynomial representation of an arbitrary function. Some numeric results are given for the fields GF(9) and GF(16). An extension of the methods to the representation of functions by rational forms is suggested.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Background</head><p>If in 1975 one surveys instruction sets for digital computers of the present and past one finds a great similarity.</p><p>A typical recent example is the Weisbecker machine <ref type="bibr">[i]</ref>. In an excellent paper Joe Weisbecker "describes a simplified microcomputer architecture that offers maximum flexibility at minimum cost." [I, p. 41] We are t°id:"The ALU is an 8-bit logic network for performing binary subtract, logical 'and','or', and 'exclusive or' on two 8-bit operands.</p><p>One operand is the bus byte and the other is contained in the D register.</p><p>The D register can also be shifted right one bit position. Add, subtract, and shift operations set a one bit overflow register... which can be tested by a branch in- struction." <ref type="bibr">[i, p. 43]</ref> No attempt is made to explain this choice of functions.</p><p>They provide a typical example of the operations provided by designers.</p><p>The second recent example is a des- cription of HALL <ref type="bibr">[2]</ref>, an assembler level language for the HYRMAN hardware simulator <ref type="bibr">[3]</ref>. The HALL machine possesses nine arithmetic functions (binary and decimal addition and subtraction, 'and', 'or', 'exclusive or', left shift and right sh~ft) and fourteen status instructions.</p><p>These are given in <ref type="table" target="#tab_1">Table I</ref>, below. (It should be noted that HALL does decimal arith- metic in a fashion analogous to the old IBM 1620 or to the S/360-370 "packed decimal" arithmetic.)</p><p>The work reported herein was supported in part by National Science Foundation Grant No. DCR74- 18108.</p><p>That these designs have not varied signifi- cantly in thirty years may be seen by comparing them to the instructions proposed by John von Neumann for the EDVAC machine in 1945 <ref type="bibr">[4]</ref>. See <ref type="table" target="#tab_1">Table II</ref>, below.</p><p>This in spite of the dual facts that electronics can support much more varied design and that the class of problems to which computers have come to be applied is far wider than was envisioned when the first computers were designed for numeric work.</p><p>Certain characteristics may be noted as common to the instruction sets of all current machines:</p><p>i.) all provide arithmetic functions (addi- tion, subtraction, multiplication) modulo 2 or 2 -i, where L is the word size in bits of the machine; 2.) all provide bit-wise logic operations (conjunction, disjunction, non-equiva- lence). The first of these characteristics, modulo arithmetic, is related to the fact that digital computers are traditionally regarded by designers as machines upon which to perform numeric calcu- lations.</p><p>The second is probably related to the relationship between machine instruction sets and the discipline of circuit design.</p><p>The seminal paper in the field of circuit design was written by Claude Shannon as a graduate student at MIT in 1938 <ref type="bibr">[5]</ref>. Therein he shows that if E(2) denotes the space {0, i} and if, for some natural number n, f is a function f: En(2)÷E(2), then f may be represented in the form:</p><formula xml:id="formula_0">f(x i, x 2, ..., x n) = Z aix*!x*2...x* n (i)</formula><p>.where for all J (! &lt; J &lt; n) x*j is either xj • or x., the generalized s--urmnation sign represents disjunction, and the implied multiplication is conjunction.</p><p>The joys and sorrows Of worklng with the disjunctive normal representation of a function are well known, as is the fact that a representa- tion in the form (i) is not unique.</p><p>The above result follows immediately from the theorem which has come to be called the Shannon Decomposition Theorem, namely, if f is defined as above then there are two functions g: En-i(2)+E(2) and h: En-i(2)÷E(2) such that:</p><p>f(x I .... , x n) = Xng(Xl, ..., Xn_ I) + Xnh(X I ..... Xn_l) • These results have dominated the area of circuit design for its whole history.</p><p>Another decomposition theorem was published in 1954 by <ref type="bibr">Reed [6]</ref> and Muller <ref type="bibr">[7]</ref>, which has come to be called the Reed-Muller Decomposition Theorem. Reed proves that if f is again defined as above and if ~ denotes non-equivalence (exclusive-or), then there exist functions g: En-i(2)÷E(2) and h: En-i(2)÷E(2), such that:</p><formula xml:id="formula_1">f(xl, .... x n) = g(x I ..... Xn_ I) Q Xnh(X I ..... Xn_l) •</formula><p>Seldom noted is the fact that Reed explicitly refers to deriving the formula using classic difference methods, that the method depends upon the fact that E(2) under the operations of non- equivalence and conjunction forms a field with two elements. Reed notes that the method may be generalized to any finite field.</p><p>There are two striking differences between the Shannon theorem and the Reed-Muller theorem:</p><p>i.) Shannon Decomposition uses the logical operations; Reed-Muller Decomposition uses two field operations; 2.) Shannon Decomposition may be generalized to a space of arbitrarily many elements, but the number of operators required increases linearly with the size of the space; Reed-Muller Decomposition may be generalized to a space of k=p q elements, where p is a prime and q is a natural number, and the number of operators required remains two. It is with a generalization of Reed's and Muller's work to instruction sets that we are con- cerned in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. An Environment</head><p>We assume a hypothetical machine M of fixed word size W, not necessarily binary-based but at least p--based where p is a prime. We assume that the instruction set of M includes addition and multiplication over the field GF(pW), the field of k = pW elements.</p><p>Let E(k) = {0,1,..,k-l}. We assume that the Machine M is to be used to evaluate functions of the form f: En(k)÷E(k) for natural numbers n.</p><p>The question which concerns us is: given this machine M, how would you program for it?</p><p>(A first answer probably should be: slowly and with much pain.) By "program" we mean the pro- cess of firmware/hardware interface to provide a user with an instruction set *hich is useable, familiar, somehow pleasant.</p><p>The main point of this paper is that'if the hardware is as assumed above, the process of firmware/hardware interface can itself be auto- mated.</p><p>Something needs to be said, before we pro- ceed, about the reasonableness of the above hypothetical environment.</p><p>Except for certain experimental machines, digital computers have been binary.</p><p>Ternary machines have been discussed at length; ternary circuits have been designed, but have always been prohibitively expensive to imple- ment. Recently Mouftah and Jordan at Laval <ref type="bibr">[8]</ref> and Etiemble and Israel at Paris VI <ref type="bibr" target="#b1">[9]</ref> have built ternary logic devices using off-the-shelf chips. In the light of this it does not now appear that ternary ( and even quinary) machines can be as easily dismissed as unrealistic.</p><p>Further, circuits for Galois addition and multiplication have been designed and implemented for many years <ref type="bibr">[10,</ref><ref type="bibr">11,</ref><ref type="bibr" target="#b4">12]</ref>. Most unrealistic is our limitation of the problem domain of concern to problems of function evalua- tion. This stems from the problems of incarnating primitives for, say, string processing and list processing into hardware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. Mathematical Results</head><p>Throughout this section and the section which follows we use + and implied multiplication to denote addition and multiplication over a field GF(pW). We denote addition and multiplication of integers modulo k by x+y(mod k) and x*y(mod k) respectively.</p><p>Subtraction and division are over GF(pW).</p><p>The first two results concern the representa- tion of a function as a polynomial over a finite field.</p><p>If f: E(k) ÷ E(k) is a one-place function, then there is a polynomial in one indeterminate which defines f, specifically:</p><formula xml:id="formula_2">k-i i f(x) = Z a.x . (2) i=0 I</formula><p>This representation is unique.</p><p>If g: E ~ + E(k) is a two-place function, then there is a polynomial in two indeterminates which defines g~ specifically:</p><formula xml:id="formula_3">k-i g(x,y) = Z a..xly ]. (3) i,j=0 13</formula><p>This representation is unique.</p><p>These results in~nediately generalize to n-place functions.</p><p>The uniqueness of the repre- sentation is a radical departure from the situation in the case of the representation of a function in disjunctive form. However the uniqueness gained is useless unless there is an effective computa- tional means to calculate the coefficients a. and 1 a...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>13</head><p>The computational means is provided by the divided difference methods of Newton <ref type="bibr">[13]</ref>. In the usual works on finite difference methods <ref type="bibr">[14,</ref><ref type="bibr">15]</ref> the methods are developed for the real or rational fields, but the modification of the techniques to finite fields is direct.</p><p>Firstly, we give the formulae for the repre- sentation of one-place functions.</p><p>Let Xo,Xl,...Xk_ 1 be any permutation of the elements of E(k). Define a difference operator as follows:</p><formula xml:id="formula_4">D~f(xj) = f(xj) -f(xj+ I) xj-xj +I<label>(4)</label></formula><p>DP~(x) = D$-lf(xj) -D~-lf(xi+ I)</p><formula xml:id="formula_5">x 3 xj -Xj+p</formula><p>This difference operator is easily implemented as a recursive procedure. Newton's Theorem is:</p><formula xml:id="formula_6">k-I f(x) = f(x o) + Z D~f(Xo)(X-Xo) ...(x-xi_l). (5) i=l</formula><p>The polynomial must be expanded to obtain the form of <ref type="formula">(2)</ref>  • ..(y-yj_l ) .</p><p>Provided that the recursive procedures for evaluating D and D are provided with a remem- brance of th~ values already calculated, the method above is simple and computationally effective• In the forms (5) and (7) the representation of the function depends upon the particular permutation of the elements x. and y. chosen• When the poly-</p><formula xml:id="formula_8">• .i l .</formula><p>nomlals are multlplied out to obtaln the forms (2) and (3), the resulting polynomial is unique.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Implementation</head><p>A Galois field GF(p q) is a vector space of dimension q over the field GF(p), which coincides exactly with the ring of integers modulo p. Add- ition of the elements of GF(p ~) is component-wise. In order to define multiplication it is necessary to choose a polynomial P(x) of degree q which is irreducible over GF(p). Two elements of GF(pq) are multiplied as if the coordinates were coeffi- cients of polynomials, the result being reduced modulo P(x).</p><p>In general there is a wide variety of choice for the polynomial P(x). The professional alge- braist assures us that all of the fields result- inn from different choices of P(x) are isomorphic. Isomorphism appears to be totally unrelated to simplicity of implementation.</p><p>Different choices of the polynomial P(x) can have a great effect on the complexity of the implementing circuitry. Complete tables of pelynomials irreducible over GF(2) for orders to 16 are in <ref type="bibr">[16]</ref>. Complete tables of polynomials irreducible over GF(3) for orders to i0 are in <ref type="bibr">[17]</ref>. The most complete tables for GF(5) and GF(7) (to orders 5 and 4, respect- ively) are in <ref type="bibr">[18]</ref>.</p><p>The table below contains some information about the results of the application of the methods outlined herein to two situations• The polynomials corresponding to six functions were evaluated for the field GF(16) and for the field GF(9). The table below presents the results. The column "UN" refers to the unnormalized form of the poly- nomial generated ((5) or (7) above); the column "N" refers to the normalized polynomial ((2) or (3) above). The integer shown is the number of non-zero coefficients in the corresponding poly- nomial.</p><p>The last two functions are defined respectively as:</p><formula xml:id="formula_9">• i, if 0&lt;xj(k-l)/2;</formula><p>Signum(x) = ~0, if x=0;</p><formula xml:id="formula_10">l ~k-l, if (k-l)/2&lt;x!k-l.</formula><p>(That is, the usual association of the high integers with the negative integers.)</p><p>'l, if x&lt;y;</p><p>Order(x,y) = 0, if x=y;</p><formula xml:id="formula_11">-i, if y&lt;x.</formula><p>(Here the high integers are again taken to represent negative integers and, in particular, k-i to represent ~i,)</p><p>GF <ref type="formula">(16)</ref> GF <ref type="formula">(9</ref>  These values are, at best, depressing for the future of a direct simple implementation of the method to words of 8 or 16 bits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. A Future Direction</head><p>In the above work we have limited ourselves by using a polynomial representation of functions• Since in a field of characteristic 2 addition and Subtraction coincide and since in a field of characteristic 3, x+x = -x, there would be no point in providing subtraction as a fundamental operation for our hypothetical machine.</p><p>It may be profitable to add division to our set of primitive operations. This may be more precisely formulated in the following way. Given f(x,y), how can one find polynomials P(x,y) and Q(x,y) such that the fol- lowing conditions all hold:</p><p>i. the degree of P(x,y) is strictly less than the degree of Q(x,y);</p><p>2. the degree of Q(x,y) is strictly less than k;</p><p>3. Q(x,y) is either irreducible or a product of irreducible factors (and hence never 0);</p><p>4. f(x,y) = P(x,y)/Q(x,y).</p><p>It may be that this modification will render the Galois field primitives a viable instruction set for incorporation into hardware.</p><p>In addition to this, the work reported at Micro-7 by Louise Jones <ref type="bibr" target="#b12">[19]</ref> concerning sets of control primitives needs to be extended so that suitable control primitives can be linked to the state modifying primitives discussed in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. Summary</head><p>This paper is concerned with a possible alternative to the usual choices of primitive machine instructions. We began the paper by noting the similarity between current machine- level instruction sets and the mechanism of the Shannon Decomposition Theorem. We showed that if one notes that Reed-Muller Decomposition is generalized by work of Newton, one may produce another sort of instruction set: one which uses Galois field addition and multiplication to evaluate each function. There are three theore- tical advantages to this: i.) each function is evaluated by a unique polynomial;</p><p>2.) given a function, the evaluating polynomial may be generated auto- matically; 3.) a polynomial in n indeterminates may be efficiently evaluated by an n stack architecture.</p><p>Empirical evaluation of some functions revealed two disadvantages:</p><p>i.) the time-space requirements for the program which produces the polynomials are large;</p><p>2.) the polynomials which correspond to some familiar machine operations (ones-complement addition and multi- plication, twos-complement addition and multiplication, ordering) have a large number of non-zero terms (which implies that execution would be slow).</p><p>The first defect is less serious. It is possible that the second defect can be overcome in the Galois field framework by including division as a primitive operation. A mathematical theory of the representation of functions as rational forms over a Galois field has not been developed and if the theory is developed it may not support the automatic generation of the evaluating rational form. It appears that the practical disadvantages outweigh the theoretical advantages, at least in the context of present technology. Were this to change, it would not be a unique event in the history of computer development.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mnemonic</head><p>Arithmetic Unit Invert bit Z = 0 B BZHD Set bit 0 &lt; Z &lt; 9** C BZLD Set bit 0 &lt; A &lt; 9 D DZID Set digit 0 &lt; Z &lt; 9 E * Set bit to i if Z = 0 ** Set bit to i if Z is a digit, i.e., is a number between 0 and 9.</p><p>[2, p. 224] <ref type="table" target="#tab_1">Table II</ref>  Set A ÷ binary equivalent of decimal number I.</p><p>Set A ÷ decimal equivalent of binary number I.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Variations</head><p>Do the operation as described above, holding the result in A.</p><p>Do the operation as described above, then set J ÷ I, I + A, A + 0.</p><p>Do the operation as described above, then store the result A into memory location yx and set A + 0.</p><p>Do the operation as described above, then store the result into the word immediately following this instruction, set A ÷ 0, and perform the altered instruction.</p><p>Do the operation as described above, then store the result into the word immediately following this instruction, set A + 0, and skip the altered instruction.</p><p>[4, pp.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table I --Operations for HALL</head><label>I</label><figDesc></figDesc><table>Operation 
Code (hex) 

NO 
No operation 
0 
+B 
Binary addition X + Y 
i 
-B 
Binary subtraction X -Y 
2 
+D 
Decimal addition X + Y 
3 
-D 
Decimal subtraction X -Y 
4 
AN 
And X Y 
5 
OR 
Or X Y 
6 
EX 
Exclusive or X Y 
7 
SL 
Shift X left one bit 
8 
SR 
Shift X right one bit 
9 

Status Unit 

BITO 
Set bit to 0 
0 
BITI 
Set bit to i 
i 
IBIT 
Invert bit 
2 
DIGO 
Set digit to 0 
3 
DIGI 
Set digit to i 
4 
IDIG 
Invert digit 
5 
NOOP 
No action 
7 
BZHO 
Set bit Z = O* 
8 
BZLO 
Set bit A = 0 
9 
DZIO 
Set digit Z = 0 
A 
IBZO 
</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A Simplified Microcomputer Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Weisbecker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEETC</title>
		<imprint>
			<biblScope unit="page" from="41" to="48" />
			<date type="published" when="1974-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Design of Assembly Level Language for Horizontal Encoded Microprogrammed Control Unit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Evans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">H</forename><surname>Moffett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Merwin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974-09" />
			<biblScope unit="page" from="217" to="224" />
		</imprint>
	</monogr>
<note type="report_type">Micro-7 Preprints</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Microprogramming Framework for Experimental Machine Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Nichols</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMICRO Newsletter</title>
		<imprint>
			<date type="published" when="1971-07" />
			<biblScope unit="page" from="17" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Von Neumann&apos;s First Computer Program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">E</forename><surname>Knuth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computing Surveys</title>
		<imprint>
			<date type="published" when="1970-12" />
			<biblScope unit="page" from="247" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Symbolic Analysis of Relay and Switching Circuits</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claude</forename><forename type="middle">E</forename><surname>Shannon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. Am. Inst. Elec. Eng</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="page" from="713" to="736" />
			<date type="published" when="1938" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Class of Multiple-errorcorrecting codes and the Decoding Scheme</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Irving</forename><forename type="middle">S</forename><surname>Reed</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. IRE-Info. Theory PGIT</title>
		<imprint>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="38" to="49" />
			<date type="published" when="1954-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Application of Boolean Algebra to Switching Circuit Design and to Error Correction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Muller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IRE Trans.-Elec. Comp. EC</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="6" to="12" />
			<date type="published" when="1954-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A Design Technique for an Integrable Ternary Arithmetic Unit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">T</forename><surname>Mouftah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">B</forename><surname>Jordan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1975 Int. Symp. on Multiplevalued Logic</title>
		<meeting>1975 Int. Symp. on Multiplevalued Logic<address><addrLine>Bloomington, Indiana</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1975-05" />
			<biblScope unit="page" from="359" to="372" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Implementation of a Complete Ternary Algebra-Application to Ternary Flip-Flop</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Etiemble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Israel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1975 Int. Symp. on Multiple-valued Logic</title>
		<meeting>1975 Int. Symp. on Multiple-valued Logic<address><addrLine>Bloomington, Indiana</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1975-05" />
			<biblScope unit="page" from="316" to="329" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">T</forename><surname>Ellison</surname></persName>
		</author>
		<idno>ARCRL-72-0109</idno>
		<title level="m">Universal Function Theory and Galois Logic Studies</title>
		<meeting><address><addrLine>Bedford, Mass</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1972" />
		</imprint>
		<respStmt>
			<orgName>Air Force Cambridge Research Laboratories</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">A</forename><surname>Christensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Ellison</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Eggan</surname></persName>
		</author>
		<title level="m">Galois Polynomial Generation (PX-7703)</title>
		<meeting><address><addrLine>St. Paul</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1972" />
		</imprint>
		<respStmt>
			<orgName>Sperry Rand-Univac</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Christensen</surname></persName>
		</author>
		<title level="m">Notes on Galois Logic Design (PX-i0452)</title>
		<meeting><address><addrLine>St. Paul</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1973" />
		</imprint>
		<respStmt>
			<orgName>Sperry RandUnivac</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Approaches to a General Theory of Finite Differences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Isaac</forename><surname>Newton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Mathematical Papers ~ of Isaac Newton</title>
		<editor>D. T, Whiteside</editor>
		<meeting><address><addrLine>Cambridge</addrLine></address></meeting>
		<imprint>
			<publisher>The University Press</publisher>
			<date type="published" when="1971" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="14" to="73" />
		</imprint>
	</monogr>
	<note>1675-6</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Jordan</surname></persName>
		</author>
		<title level="m">Calculus of Finite Differences</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Chelsea Publishing Company</publisher>
			<date type="published" when="1947" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Milne-Thomson</surname></persName>
		</author>
		<title level="m">The Calculus of Finite Differences</title>
		<meeting><address><addrLine>London</addrLine></address></meeting>
		<imprint>
			<publisher>Macmillan and Co</publisher>
			<date type="published" when="1933" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Error-Correction Codes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">W</forename><surname>Peterson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961" />
			<publisher>John Wiley and Sons</publisher>
			<biblScope unit="page" from="472" to="492" />
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">P</forename><surname>Wolff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Irreducible Polynomials over GF</title>
		<imprint>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="25" to="57" />
			<date type="published" when="1975-06" />
		</imprint>
		<respStmt>
			<orgName>Virginia Polytechnic Institute and State University</orgName>
		</respStmt>
	</monogr>
	<note>unpublished M.S. project</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Tables of Irreducible Polynomials for the First Four Prime Moduli</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randolph</forename><surname>Church</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Math</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="198" to="209" />
			<date type="published" when="1935-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Microinstruction Sequencing for Structured Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Louise</forename><forename type="middle">H</forename><surname>Jones</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974-09" />
			<biblScope unit="page" from="277" to="89" />
		</imprint>
	</monogr>
<note type="report_type">Micro-7 Preprints</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
