<?xml version="1.0" encoding="UTF-8"?>
<CSXAPIMetadata>
<algorithm name="SVM HeaderParse" version="0.2">
<title>Dataflow Execution of Sequential Imperative Programs on Multicore Architectures</title>
<authors>
<author>
<name>Gagan Gupta</name>
<affiliation>Computer Sciences Department; University of Wisconsin-Madison</affiliation>
<address>Madison, WI, USA</address>
<email>gagang @cs.wisc.edu</email>
</author>
<author>
<name>Gurindar S. Sohi</name>
<affiliation>Computer Sciences Department; University of Wisconsin-Madison</affiliation>
<address>Madison, WI, USA</address>
<email>sohi@cs.wisc.edu</email>
</author>
</authors>
<keywords>
<keyword>Categories and Subject Descriptors C.1.3 [Processor Architecture</keyword>
<keyword>Other Architecture Styles – data-flow architectures</keyword>
<keyword>C.1.4 [Processor Architecture</keyword>
<keyword>Parallel Architectures</keyword>
<keyword>D.1.3 [Programming Techniques</keyword>
<keyword>Concurrent Programming – parallel programming. General Terms</keyword>
<keyword>Performance</keyword>
<keyword>Design. Keywords</keyword>
<keyword>Dataflow</keyword>
<keyword>multicore</keyword>
<keyword>programming</keyword>
<keyword>determinacy</keyword>
</keywords>
<abstract>As multicore processors become the default, researchers are aggressively looking for program execution models that make it easier to use the available resources. Multithreaded programming models that rely on statically-parallel programs have gained prevalence. Most of the existing research is directed at adapting and enhancing such models, alleviating their drawbacks, and simplifying their usage. This paper takes a different approach and proposes a novel execution model to achieve parallel execution of statically-sequential programs. It dynamically parallelizes the execution of suitably-written sequential programs, in a dataflow fashion, on multiple processing cores. Significantly, the execution is race-free and determinate. Thus the model eases program development and yet exploits available parallelism. This paper describes the implementation of a software runtime library that implements the proposed execution model on existing commercial multicore machines. We present results from experiments running benchmark programs, using both the proposed technique as well as traditional parallel programming, on three different systems. We find that in addition to easing the development of the benchmarks, the approach is resource-efficient and achieves performance similar to the traditional approach, using stock compilers, operating systems and hardware, despite the overheads of an all-software implementation of the model.</abstract>
<validHeader>1</validHeader>
</algorithm>
</CSXAPIMetadata>
